{"version":3,"sources":["Components/Form.js","Components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getWeather","type","name","placeholder","required","Weather","city","country","temperature","humidity","description","API_KEY","App","state","temperarture","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","City","value","Country","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","Components_Form","this","Components_Weather","descriptions","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAQeA,EAPF,SAAPA,EAAOC,GAAK,OACdC,EAAAC,EAAAC,cAACJ,EAAD,CAAMK,SAAYJ,EAAMK,YACpBJ,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOC,KAAK,OAAOC,YAAc,6BAA6BC,UAAQ,IAClFR,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOC,KAAK,UAAUC,YAAc,gCAAgCC,UAAQ,IACxFR,EAAAC,EAAAC,cAAA,4BCMOO,EATC,SAAAV,GAAK,OACbC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,wBAAgBH,EAAMW,KAAtB,KAA8BX,EAAMY,QAApC,KACAX,EAAAC,EAAAC,cAAA,2BAAmBH,EAAMa,YAAzB,KACAZ,EAAAC,EAAAC,cAAA,wBAAgBH,EAAMc,UACtBb,EAAAC,EAAAC,cAAA,2BAAmBH,EAAMe,YAAzB,OCHFC,EAAS,mCAwCAC,6MAtCXC,MAAQ,CACNC,kBAAeC,EACfT,UAAOS,EACPR,aAAUQ,EACVN,cAAWM,EACXL,iBAAcK,KAEhBf,iDAAa,SAAAgB,EAAMC,GAAN,IAAAX,EAAAC,EAAAW,EAAAC,EAAA,OAAAC,EAAAvB,EAAAwB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXP,EAAEQ,iBACInB,EAAOW,EAAES,OAAOC,SAASC,KAAKC,MAC9BtB,EAAUU,EAAES,OAAOC,SAASG,QAAQD,MAH/BP,EAAAE,KAAA,EAIWO,MAAK,oDAAAC,OAAqD1B,EAArD,KAAA0B,OAA6DzB,EAA7D,WAAAyB,OAA8ErB,EAA9E,kBAJhB,cAILO,EAJKI,EAAAW,KAAAX,EAAAE,KAAA,EAKQN,EAASgB,OALjB,OAKLf,EALKG,EAAAW,KAMXE,QAAQC,IAAIjB,GACZkB,EAAKC,SAAS,CACZxB,aAAeK,EAAKoB,KAAKC,KACzBlC,KAAOa,EAAKjB,KACZK,QAAUY,EAAKsB,IAAIlC,QACnBE,SAAWU,EAAKoB,KAAK9B,SACrBC,YAAcS,EAAKuB,QAAQ,GAAGhC,cAZrB,yBAAAY,EAAAqB,SAAA3B,oIAgBX,OACEpB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8C,EAAD,CAAM5C,WAAY6C,KAAK7C,YACvBJ,EAAAC,EAAAC,cAACgD,EAAD,CACAhC,aAAgB+B,KAAKhC,MAAMC,aAC3BR,KAAQuC,KAAKhC,MAAMP,KACnBC,QAAWsC,KAAKhC,MAAMN,QACtBE,SAAYoC,KAAKhC,MAAMJ,SACvBC,YAAemC,KAAKhC,MAAMkC,wBAhClBC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.702bf4a7.chunk.js","sourcesContent":["import React from \"react\"\r\nconst Form = props => (\r\n    <Form onSubmit = {props.getWeather}>\r\n        <input type=\"text\" name=\"City\" placeholder = \"Enter the name of the city\" required />\r\n        <input type=\"text\" name=\"Country\" placeholder = \"Enter the name of the Country\" required />\r\n        <button> Submit </button>\r\n    </Form>\r\n);\r\nexport default Form","import React from \"react\"\r\n\r\nconst Weather = props => ( \r\n        <div>\r\n        <p> Location : {props.city}, {props.country} </p>\r\n        <p> Temperature : {props.temperature} </p>\r\n        <p> Humidity : {props.humidity }</p>\r\n        <p> Description : {props.description} </p>\r\n        </div>\r\n);\r\n\r\nexport default Weather","import React , {Component} from \"react\"\nimport Form from \"./Components/Form\"\nimport Weather from \"./Components/Weather\";\n\nconst API_KEY= \"38c210fe06f1e3d9b5710ebc36c39ffb\"\nclass App extends Component {\n    state = {\n      temperarture : undefined,\n      city : undefined,\n      country : undefined,\n      humidity : undefined,\n      description : undefined\n    }\n    getWeather = async(e) => {\n      e.preventDefault()\n      const city = e.target.elements.City.value\n      const country = e.target.elements.Country.value\n      const api_call =await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n      const data = await api_call.json();\n      console.log(data)\n      this.setState({\n        temperarture : data.main.temp,\n        city : data.name,\n        country : data.sys.country,\n        humidity : data.main.humidity,\n        description : data.weather[0].description\n      }) \n  }\n    render(){\n      return(\n        <div>\n          <Form getWeather={this.getWeather}>\n          <Weather\n          temperarture = {this.state.temperarture}\n          city = {this.state.city}\n          country = {this.state.country}\n          humidity = {this.state.humidity}\n          description = {this.state.descriptions} />\n          </Form>       \n        </div>\n      )\n    }\n  }\n \nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}